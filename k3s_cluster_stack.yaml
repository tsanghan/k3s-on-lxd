# An example for creating a k3s stack with 3 etcd,master
- name: Create k3s cluster containers
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:

    - name: Create containers
      community.general.lxd_container:
        name: "{{ item }}"
        state: started
        source:
          type: image
          mode: pull
          server: https://cloud-images.ubuntu.com/releases
          protocol: simplestreams # if you get a 404, try setting protocol: simplestreams
          alias: focal
        profiles: ["k3s"]
        wait_for_ipv4_addresses: true
        timeout: 600
      loop:
        - m1
        - m2
        - m3

- name: Prepare k3s cluster containers
  hosts: api
  connection: lxd
  gather_facts: false
  tasks:

    - name: Copy kmsg.conf
      copy:
        src: files/kmsg.conf
        dest: /etc/tmpfiles.d/kmsg.conf

    - name: Make /dev/kmsg link
      raw: /usr/bin/systemd-tmpfiles --create

- name: Install k3s on m1 container
  hosts: m1
  connection: lxd
  gather_facts: false
  tasks:

    - name: Get ramdom Token
      delegate_to: localhost
      uri:
        url: http://www.uuidgenerator.net/api/version4
        return_content: yes
      register: result

    - name: Set Fact
      set_fact:
        token: "{{ result.content }}"

    - name: debug
      debug:
        msg: "Token: {{ result.content }}"

    - name: Install k3s
      raw: curl -sfL https://get.k3s.io | K3S_TOKEN={{ token }} INSTALL_K3S_CHANNEL=latest INSTALL_K3S_SKIP_START=true sh -s - --cluster-init --snapshotter=native

    - name: Wait till k3s.service file exists
      wait_for:
        path: /etc/systemd/system/k3s.service

    - name: Edit k3s.service file
      lineinfile:
        path: /etc/systemd/system/k3s.service
        state: absent
        regexp: '^ExecStartPre='

    - name: Reload Systemd
      raw: systemctl daemon-reload

    - name: Start k3s
      systemd:
        state: started
        name: k3s

    - name: Check k3s server start up is completed
      raw: /usr/local/bin/kubectl get all --all-namespaces
      register: result
      until: result.stdout.find("ContainerCreating") == -1 and result.stdout.find("Running") != -1
      retries: 10
      delay: 10

- name: Install k3s on other apis containers
  hosts: api_peers
  connection: lxd
  tasks:

    - name: Gather facts
      delegate_to: m1
      setup:

    - name: Set IP Fact
      set_fact:
        master_ip: "{{ ansible_default_ipv4.address }}"

    - name: Grap token from m1
      delegate_to: m1
      raw: cat /var/lib/rancher/k3s/server/node-token
      register: result

    - name: Set Token Fact
      set_fact:
        token: "{{ result.stdout_lines[0].split(':')[3] }}"

    - name: debug
      debug:
        msg: "IP: {{ master_ip }} Token: {{ token }}"

    - name: Install k3s
      raw: "curl -sfL https://get.k3s.io | K3S_TOKEN={{ token }} INSTALL_K3S_CHANNEL=latest INSTALL_K3S_SKIP_START=true sh -s - --server https://{{ master_ip }}:6443 --snapshotter=native"

    - name: Wait till k3s.service file exists
      wait_for:
        path: /etc/systemd/system/k3s.service

    - name: Edit k3s.service file
      lineinfile:
        path: /etc/systemd/system/k3s.service
        state: absent
        regexp: '^ExecStartPre='

    - name: Reload Systemd
      raw: systemctl daemon-reload

    - name: Start k3s
      systemd:
        state: started
        name: k3s
      throttle: 1

- name: Dsiplay nodes
  hosts: m1
  connection: lxd
  gather_facts: false
  tasks:

    - name: Display get nodes
      raw: /usr/local/bin/kubectl get nodes
      register: result

    - name: debug
      debug:
        msg: "{{ result.stdout_lines }}"
